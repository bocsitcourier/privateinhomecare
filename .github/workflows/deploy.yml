name: Deploy (Droplet + PM2)

on:
  push:
    branches: [ main ]        # deploy on push to main
  workflow_dispatch: {}       # or run manually

permissions:
  contents: read

# Avoid overlapping deploys
concurrency:
  group: deploy-production
  cancel-in-progress: true

env:
  # Defaults (can also be set as Actions "Variables")
  NODE_VERSION: ${{ vars.NODE_VERSION || '20' }}
  PORT:         ${{ vars.PORT || '5000' }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install & Build
        run: |
          npm ci
          npm run build

      # Start ssh-agent and load private key from Secrets
      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      # Trust the server host key (prevents interactive prompt)
      - name: Add known_hosts
        run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      # Upload repo to remote APP_DIR (exclude stuff we don't need)
      - name: Rsync to server
        run: |
          rsync -az --delete \
            --exclude '.git' \
            --exclude 'node_modules' \
            ${SSH_PORT:+-e "ssh -p $SSH_PORT"} \
            ./ $SSH_USER@$SSH_HOST:$APP_DIR/
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT }}          # optional (e.g., 2222)
          APP_DIR:  ${{ secrets.APP_DIR }}

      # Install prod deps on the server & (re)start with PM2
      - name: Install deps on server & restart PM2
        run: |
          ssh ${SSH_PORT:+-p $SSH_PORT} $SSH_USER@$SSH_HOST <<'EOSSH'
          set -euo pipefail

          APP_DIR="${APP_DIR}"
          PM2_APP="${PM2_APP}"
          PORT="${PORT}"

          cd "$APP_DIR"

          # Install production dependencies
          npm ci --omit=dev

          # Ensure PM2 is present
          if ! command -v pm2 >/dev/null 2>&1; then
            npm i -g pm2
          fi

          # First run vs subsequent runs
          if pm2 describe "$PM2_APP" >/dev/null 2>&1; then
            pm2 restart "$PM2_APP"
          else
            PORT="$PORT" NODE_ENV=production \
              pm2 start dist/index.js --name "$PM2_APP" --cwd "$APP_DIR"
            pm2 save
            # enable on boot (ignore if already set)
            PM2_USER=$(whoami)
            pm2 startup systemd -u "$PM2_USER" --hp "$(eval echo ~${PM2_USER})" >/dev/null || true
            pm2 save
          fi
          EOSSH
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          APP_DIR:  ${{ secrets.APP_DIR }}
          PM2_APP:  ${{ secrets.PM2_APP }}
          PORT:     ${{ env.PORT }}

      # (Optional) quick health check
      # - name: Health check
      #   run: curl -fsS https://privateinhomecaregiver.com/ -o /dev/null

